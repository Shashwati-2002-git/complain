import { useState, useEffect, useCallback } from 'react';
import { Settings, Shield, BarChart3, Activity, FileText, UserCheck, MessageCircle, RefreshCw } from 'lucide-react';
import { useSocket } from '../../hooks/useSocket';
import { useAuth } from '../../hooks/useAuth';
import { apiService } from '../../services/apiService';

// Define interfaces for type safety
interface Agent {
  id: string;
  name: string;
  initials: string;
  status: string;
  currentLoad: number;
  avgResponseTime: string;
  color: string;
  lastUpdated: Date;
}

interface AgentPerformance {
  id: string;
  name: string;
  initials: string;
  color: string;
  resolvedToday: number;
  totalResolved: number;
  avgResolutionTime: string;
  satisfaction: number;
}

interface TicketData {
  total: number;
  resolved: number;
  pending: number;
  critical: number;
  inProgress: number;
  newToday: number;
  reopened: number;
  trend: string;
  avgResolutionTime: string;
}

interface ApiAgentData {
  _id?: string;
  id?: string;
  name?: string;
  firstName?: string;
  lastName?: string;
  agentStatus?: string;
  activeComplaints?: any[];
  metrics?: {
    avgResponseTime?: number;
  };
  lastStatusChange?: string | Date;
}

interface ApiPerformanceData {
  agentId: string;
  agentName?: string;
  resolvedToday?: number;
  totalResolved?: number;
  avgResolutionTime?: string;
  satisfactionScore?: number;
}

interface ApiAnalyticsData {
  totalComplaints?: number;
  resolvedComplaints?: number;
  openComplaints?: number;
  highPriorityComplaints?: number;
  inProgressComplaints?: number;
  newTodayComplaints?: number;
  reopenedComplaints?: number;
  trend?: string;
  avgResolutionTime?: string;
}

interface Complaint {
  _id: string;
  ticketId?: string;
  title: string;
  description: string;
  status: string;
  priority?: string;
  category?: string;
  userId?: string;
  agentId?: string;
  createdAt: string;
  updatedAt: string;
}

export const AdminDashboard = () => {
  const [activeSection, setActiveSection] = useState<string>('user-agent-control');
  const { socket, isConnected } = useSocket();
  const { user, logout } = useAuth();
  const [showUserMenu, setShowUserMenu] = useState<boolean>(false);
  const [isRefreshing, setIsRefreshing] = useState<boolean>(false);
  
  // Admin profile information
  const [adminProfile, setAdminProfile] = useState<{name: string; email: string; role: string}>({ 
    name: user?.name || 'Admin',
    email: user?.email || 'admin@example.com',
    role: user?.role || 'admin'
  });

  // Real-time agent data with default values
  const [agents, setAgents] = useState<Agent[]>([
    {
      id: '1',
      name: 'John Doe',
      initials: 'JD',
      status: 'available',
      currentLoad: 3,
      avgResponseTime: '4m 30s',
      color: 'blue',
      lastUpdated: new Date()
    },
    {
      id: '2',
      name: 'Alice Smith',
      initials: 'AS',
      status: 'busy',
      currentLoad: 6,
      avgResponseTime: '5m 12s',
      color: 'purple',
      lastUpdated: new Date()
    },
    {
      id: '3',
      name: 'Robert Johnson',
      initials: 'RJ',
      status: 'available',
      currentLoad: 2,
      avgResponseTime: '3m 45s',
      color: 'green',
      lastUpdated: new Date()
    },
    {
      id: '4',
      name: 'Emily Davis',
      initials: 'ED',
      status: 'offline',
      currentLoad: 0,
      avgResponseTime: '4m 15s',
      color: 'gray',
      lastUpdated: new Date()
    },
    {
      id: '5',
      name: 'Michael Wilson',
      initials: 'MW',
      status: 'busy',
      currentLoad: 8,
      avgResponseTime: '6m 20s',
      color: 'orange',
      lastUpdated: new Date()
    }
  ]);
  
  const [ticketsData, setTicketsData] = useState<TicketData>({
    total: 92,
    resolved: 68,
    pending: 24,
    critical: 3,
    inProgress: 15,
    newToday: 8,
    reopened: 2,
    trend: '+8%',
    avgResolutionTime: '1.4 days'
  });
  
  // Agent performance data
  const [agentPerformance, setAgentPerformance] = useState<AgentPerformance[]>([
    {
      id: '1',
      name: 'John Doe',
      initials: 'JD',
      color: 'blue',
      resolvedToday: 5,
      totalResolved: 28,
      avgResolutionTime: '1.2 days',
      satisfaction: 94
    },
    {
      id: '2',
      name: 'Alice Smith',
      initials: 'AS',
      color: 'purple',
      resolvedToday: 7,
      totalResolved: 42,
      avgResolutionTime: '1.0 days',
      satisfaction: 96
    },
    {
      id: '3',
      name: 'Robert Johnson',
      initials: 'RJ',
      color: 'green',
      resolvedToday: 3,
      totalResolved: 19,
      avgResolutionTime: '1.5 days',
      satisfaction: 88
    },
    {
      id: '4',
      name: 'Emily Davis',
      initials: 'ED',
      color: 'orange',
      resolvedToday: 0,
      totalResolved: 23,
      avgResolutionTime: '1.3 days',
      satisfaction: 92
    },
    {
      id: '5',
      name: 'Michael Wilson',
      initials: 'MW',
      color: 'pink',
      resolvedToday: 4,
      totalResolved: 31,
      avgResolutionTime: '1.1 days',
      satisfaction: 90
    }
  ]);

  // Update admin profile when user changes
  useEffect(() => {
    if (user) {
      setAdminProfile({
        name: user.name,
        email: user.email,
        role: user.role
      });
    }
  }, [user]);

  // Get initials from name
  const getInitials = (name: string): string => {
    return name
      .split(' ')
      .map((part: string) => part[0] || '')
      .join('')
      .substring(0, 2)
      .toUpperCase();
  };
  
  // Format response time
  const formatResponseTime = (minutes?: number): string => {
    if (!minutes) return '0m';
    const hours = Math.floor(minutes / 60);
    const mins = Math.floor(minutes % 60);
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };
  
  // Get color based on workload
  const getAgentColor = (load: number): string => {
    if (load >= 7) return 'red';
    if (load >= 5) return 'orange';
    if (load >= 3) return 'blue';
    return 'green';
  };

  // Fetch real data from the API
  const fetchDashboardData = useCallback(async () => {
    try {
      setIsRefreshing(true);
      
      // Fetch agents and dashboard analytics
      const [agentsResponse, analyticsResponse] = await Promise.all([
        apiService.getAllUsers({ role: 'agent' }),
        apiService.getDashboardAnalytics('30')
      ]);
      
      if (agentsResponse.data && Array.isArray(agentsResponse.data)) {
        // Transform agent data to match our UI format
        const formattedAgents: Agent[] = agentsResponse.data.map((agent: ApiAgentData) => ({
          id: agent._id || agent.id || '',
          name: agent.name || `${agent.firstName || ''} ${agent.lastName || ''}`.trim(),
          initials: getInitials(agent.name || `${agent.firstName || ''} ${agent.lastName || ''}`),
          status: agent.agentStatus || 'available',
          currentLoad: agent.activeComplaints?.length || 0,
          avgResponseTime: formatResponseTime(agent.metrics?.avgResponseTime),
          color: getAgentColor(agent.activeComplaints?.length || 0),
          lastUpdated: new Date(agent.lastStatusChange || Date.now())
        }));
        setAgents(formattedAgents);
      }
      
      if (analyticsResponse.data) {
        const stats = analyticsResponse.data as ApiAnalyticsData;
        setTicketsData({
          total: stats.totalComplaints || 0,
          resolved: stats.resolvedComplaints || 0,
          pending: stats.openComplaints || 0,
          critical: stats.highPriorityComplaints || 0,
          inProgress: stats.inProgressComplaints || 0,
          newToday: stats.newTodayComplaints || 0,
          reopened: stats.reopenedComplaints || 0,
          trend: stats.trend || '0%',
          avgResolutionTime: stats.avgResolutionTime || '0 days'
        });
      }
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      setIsRefreshing(false);
    }
  }, [setIsRefreshing]);

  // Fetch agent performance data
  const fetchAgentPerformance = useCallback(async () => {
    try {
      const response = await apiService.getTeamPerformance();
      
      if (response.data && Array.isArray(response.data)) {
        const formattedPerformance: AgentPerformance[] = response.data.map((agent: ApiPerformanceData) => ({
          id: agent.agentId,
          name: agent.agentName || 'Unknown Agent',
          initials: getInitials(agent.agentName || 'Unknown Agent'),
          color: ['blue', 'green', 'purple', 'orange', 'pink'][Math.floor(Math.random() * 5)],
          resolvedToday: agent.resolvedToday || 0,
          totalResolved: agent.totalResolved || 0,
          avgResolutionTime: agent.avgResolutionTime || '0 days',
          satisfaction: agent.satisfactionScore || 0
        }));
        
        setAgentPerformance(prevPerformance => {
          return formattedPerformance.length > 0 ? formattedPerformance : prevPerformance;
        });
      }
    } catch (error) {
      console.error('Error fetching agent performance:', error);
    }
  }, []);

  // Fetch data on component mount
  useEffect(() => {
    // Fetch initial data
    Promise.all([
      fetchDashboardData(),
      fetchAgentPerformance()
    ]);
    
    // Set up a refresh interval
    const interval = setInterval(() => {
      Promise.all([
        fetchDashboardData(),
        fetchAgentPerformance()
      ]);
    }, 60000); // Refresh every minute
    
    return () => clearInterval(interval);
  }, [fetchDashboardData, fetchAgentPerformance]);
  
  // Handle logout
  const handleLogout = () => {
    logout();
    setShowUserMenu(false);
  };
  
  // Close user menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      if (showUserMenu && !target.closest('.admin-menu-container')) {
        setShowUserMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showUserMenu]);
  
  // Function to handle real-time updates
  const handleAgentStatusUpdate = useCallback((agentData: { id: string; status: string; currentLoad: number }) => {
    setAgents(prevAgents => {
      return prevAgents.map(agent => {
        if (agent.id === agentData.id) {
          return {
            ...agent,
            status: agentData.status,
            currentLoad: agentData.currentLoad,
            lastUpdated: new Date()
          };
        }
        return agent;
      });
    });
  }, []);
  
  // Socket event listener for real-time updates
  useEffect(() => {
    if (socket && isConnected) {
      // Listen for agent status updates
      socket.on('agent:statusUpdate', handleAgentStatusUpdate);
      socket.on('agent_status_update', (updatedAgents) => {
        // Handle agent status updates from the server
        if (Array.isArray(updatedAgents)) {
          setAgents(prevAgents => {
            const agentMap = new Map(prevAgents.map(a => [a.id, a]));
            
            updatedAgents.forEach(agent => {
              const agentId = agent.id || agent._id;
              if (agentId && agentMap.has(agentId)) {
                const existingAgent = agentMap.get(agentId);
                if (existingAgent) {
                  agentMap.set(agentId, {
                    ...existingAgent,
                    status: agent.agentStatus || agent.status || existingAgent.status,
                    currentLoad: agent.activeComplaints?.length || agent.currentLoad || existingAgent.currentLoad,
                    lastUpdated: new Date()
                  });
                }
              }
            });
            
            return Array.from(agentMap.values());
          });
        }
      });
      
      // Listen for ticket updates
      socket.on('tickets:update', (data) => {
        setTicketsData(prevData => ({
          ...prevData,
          total: data.total || prevData.total,
          resolved: data.resolved || prevData.resolved,
          pending: data.pending || prevData.pending,
          critical: data.critical || prevData.critical
        }));
      });
      
      // Listen for dashboard stats updates
      socket.on('dashboard_stats_update', (stats) => {
        setTicketsData(prevData => ({
          ...prevData,
          total: stats.totalComplaints || prevData.total,
          resolved: stats.resolvedComplaints || prevData.resolved,
          pending: stats.openComplaints || prevData.pending,
          critical: stats.highPriorityComplaints || prevData.critical,
          inProgress: stats.inProgressComplaints || prevData.inProgress,
          newToday: stats.newTodayComplaints || prevData.newToday,
          reopened: stats.reopenedComplaints || prevData.reopened,
          trend: stats.trend || prevData.trend,
          avgResolutionTime: stats.avgResolutionTime || prevData.avgResolutionTime
        }));
      });

      // Listen for new complaints
      socket.on('new_complaint', () => {
        // Refresh dashboard data when a new complaint is received
        Promise.all([
          fetchDashboardData(),
          fetchAgentPerformance()
        ]);
      });
      
      return () => {
        socket.off('agent:statusUpdate');
        socket.off('agent_status_update');
        socket.off('tickets:update');
        socket.off('dashboard_stats_update');
        socket.off('new_complaint');
      };
    }
  }, [socket, isConnected, fetchDashboardData, handleAgentStatusUpdate, fetchAgentPerformance]);
  
  // Complaint categories data
  const [complaintCategories] = useState([
    { name: 'Technical Issues', count: 34, percentage: 37 },
    { name: 'Billing Problems', count: 26, percentage: 28 },
    { name: 'Product Quality', count: 18, percentage: 20 },
    { name: 'Delivery Issues', count: 9, percentage: 10 },
    { name: 'Other', count: 5, percentage: 5 }
  ]);
  
  // Refresh data on demand
  const refreshData = () => {
    if (isRefreshing) return;
    
    // Fetch fresh data from API
    Promise.all([
      fetchDashboardData(),
      fetchAgentPerformance()
    ]);
  };
  
  // Assign ticket function
  const assignTicket = async (agentId: string) => {
    try {
      setIsRefreshing(true);
      
      // Get pending complaints
      const complaintsResponse = await apiService.getComplaints({ status: 'New' });
      if (!complaintsResponse.data || !Array.isArray(complaintsResponse.data) || complaintsResponse.data.length === 0) {
        alert('No new complaints available for assignment');
        return;
      }
      
      // Assign first pending complaint to selected agent
      const complaintToAssign = complaintsResponse.data[0] as Complaint;
      await apiService.assignComplaint(complaintToAssign._id, agentId);
      
      // Update local state optimistically
      setAgents(prevAgents => {
        return prevAgents.map(agent => {
          if (agent.id === agentId && agent.status === 'available') {
            return { ...agent, currentLoad: agent.currentLoad + 1 };
          }
          return agent;
        });
      });
      
      // Refresh data after assignment
      Promise.all([
        fetchDashboardData(),
        fetchAgentPerformance()
      ]);
      
      // Inform the user
      alert(`Assigned complaint #${complaintToAssign.ticketId || complaintToAssign._id} to agent`);
    } catch (error) {
      console.error('Error assigning ticket:', error);
      alert('Failed to assign ticket');
    } finally {
      setIsRefreshing(false);
    }
  };

  // Using this for admin control panel features
  return (
    <div className="flex-1 bg-gray-50 p-6">
      <h1>Admin Dashboard</h1>
      <p>This is a placeholder for the dashboard UI.</p>
    </div>
  );
};
